/*
 * UNIVERSIDAD DE LAS FUERZAS ARMADAS - ESPE
 * Copiar ejercicios de operadores sobrecargados y por cada integrante del grupo generar un propio operador sobrecargado
 * Autor: Alexander David Guacán Rivera, Alison Paola Moncayo Achilchisa, Génesis Isabel Calapaqui Portilla, Ariel Alexander Jara Caiza
 * Fecha de creacion: 17/05/2022
 * Fecha de ultima modificación: 24/05/2022
 * Grupo: 1 y 17
 * Github: https://github.com/Alexander-Guacan/GRUPO_1_4698_ESTRUCTURA_DE_DATOS.git / https://github.com/Ariel2006/G17-ESTRUCTURA-DE-DATOS
 */

#include "Reloj.h"
#include "Vector.h"
#include "Persona.h"
#include "Cadena.h"
#include "Complejo.h"
#include "Cuadro.h"
#include "A.h"
#include "quebrado.h"
#include "B.h"
#include "ClaseA.h"
#include "Conjuntos.h"
#include "Cuadrado.h"
#include <iostream>
#include <iomanip>

int main() {
    // Ejercicio 1
    system("cls");
    std::cout << "\n EJERCICIO 1: RELOJ\n";

    Reloj R(10, 59, 56);

    for (int i = 0; i < 10; i++, ++R)
        std::cout << std::setw(4) << R.Hora() << std::setw(4) << R.Minuto()
                  << std::setw(4) << R.Segundo() << std::endl;

    system("pause");

    // Ejercicio 2
    system("cls");
    std::cout << "\n EJERCICIO 2: PRODUCTO PUNTO DE VECTORES\n";

    Vector V1(10, 20), V2(5, 5);
    float p = V1 * V2;

    std::cout << "(" << V1.DameX() << ", " << V1.DameY() << ") * "
              << "(" << V2.DameX() << ", " << V2.DameY() << ")"
              << " = " << p << std::endl;

    system("pause");

    // Ejercicio propio sobrecargando operador ->
    system("cls");
    std::cout << "\n EJERCICIO DEL GRUPO SOBRECARGANDO OPERADOR ->\n";
    std::cout << "\nInstancia de objeto: Persona obj('Genesis', 32)\n";

    Persona obj("Genesis", 32);

    std::cout << "\nAccediendo a metodo: obj.imprimirDatos()\n";

    obj.imprimirDatos();

    std::cout << "\nAccediendo a metodo: obj->imprimirDatos()\n";

    obj->imprimirDatos();

    std::cout << '\n';
    system("pause");

    // Ejercicio 3
    system("cls");
    std::cout << "\n EJERCICIO 3: Concatenacion de cadenas\n";

    char mensaje1[]{"Hola "}, mensaje2[]{"Juan"};
    Cadena cadena1(mensaje1), cadena2(mensaje2);

    cadena1 + cadena2;

    std::cout << "\nCadena1{'Hola '} + Cadena2{'Juan'} = " << cadena1.dameCadena() << '\n';

    system("pause");

    // Ejercicio 4
    system("cls");
    std::cout << "\n EJERCICIO 4: Sumatoria de numeros complejos\n";

    Complejo comp1(5, 6), comp2(3, 4), comp3(2, 1);

    Complejo comp4 = comp1 + comp2 - comp3;

    printf("\n(%.2f + %.2fi) + (%.2f + %.2fi) - (%.2f + %.2fi) = %.2f + %.2fi\n",
           comp1.getParteReal(), comp1.getParteImaginaria(), comp2.getParteReal(), comp2.getParteImaginaria(),
           comp3.getParteReal(), comp3.getParteImaginaria(), comp4.getParteReal(), comp4.getParteImaginaria());

    system("pause");

    // Ejercicio propio sobrecargando new
    system("cls");
    std::cout << "\n EJERCICIO DEL GRUPO SOBRECARGANDO OPERADOR new\n";

    std::cout << "\nIngrese cantidad de cuadros a dibujar: ";

    int cantidadDeCuadros{};
    std::cin >> cantidadDeCuadros;

    Cuadro cuadro;
    cuadro.dibujar(cantidadDeCuadros);

    std::cout << '\n';
    system("pause");

    // Ejercicio 5
    system("cls");
    std::cout << "\n EJERCICIO 5: sobrecarga de operador ++ como prefijo y sufijo\n";

    A A1(2), A2(3), A3(0);

    std::cout << "Inicialmente :\n"
              << "A1 : " << A1.DameX() << "\n"
              << "A2 : " << A2.DameX() << "\n\n";

    A3 = ++A1;
    std::cout << "Como prefijo A3 = ++A1 :\n"
              << "A1 : " << A1.DameX() << "\n"
              << "A3 : " << A3.DameX() << "\n\n";

    A3 = A2++;
    std::cout << "Como sufijo A3 = A2++:\n"
              << "A2 : " << A2.DameX() << "\n"
              << "A3 : " << A3.DameX() << "\n\n";
    system("pause");

    // Ejercicio 6
    system("cls");
    std::cout << "\n EJERCICIO 6: sumatoria de fracciones\n";
    Quebrado quebrado1(2, 3), quebrado2(5, 6), quebrado3(0, 0);
    quebrado3 = quebrado1 + quebrado2;
    std::cout << quebrado1.DameNum() << "/" << quebrado1.DameDen() << " + "
              << quebrado2.DameNum() << "/" << quebrado2.DameDen() << " = "
              << quebrado3.DameNum() << "/" << quebrado3.DameDen() << std::endl;
    system("pause");

    // Ejercicio 7
    system("cls");
    std::cout << "\n EJERCICIO 7: uso de funcion friend\n";

    ClaseA Objeto;
    Objeto.defineA(3);

    std::cout << P(Objeto) << std::endl;

    system("pause");

    // Ejercicio sobrecargando operador -
    system("cls");
    std::cout << "\n EJERCICIO DEL GRUPO SOBRECARGANDO OPERADOR - y +\n";

    ComplejoTemplate<int> complejoTemplateA(1, 3), complejoTemplateB(2, 4);
    ComplejoTemplate<int> complejoTemplateC;

    std::cout << "Suma de complejos " << std::endl;

    complejoTemplateC = complejoTemplateA + complejoTemplateB;

    std::cout << "(" << complejoTemplateA.getReal() << " + " << complejoTemplateA.getImg() << "i)"
              << " + (" << complejoTemplateB.getReal() << " + " << complejoTemplateB.getImg() << "i) = "
              << "(" << complejoTemplateC.getReal() << " + " << complejoTemplateC.getImg() << " i)" << std::endl;

    complejoTemplateC.setImg(0);
    complejoTemplateC.setReal(0);

    std::cout << "Resta de complejos " << std::endl;

    complejoTemplateC = complejoTemplateA - complejoTemplateB;

    std::cout << "(" << complejoTemplateA.getReal() << " + " << complejoTemplateA.getImg() << "i)"
              << " - (" << complejoTemplateB.getReal() << " + " << complejoTemplateB.getImg() << "i) = "
              << "(" << complejoTemplateC.getReal() << " + " << complejoTemplateC.getImg() << " i)" << "\n\n";

    system("pause");

    // Ejercicio 8
    system("cls");
    std::cout << "\n EJERCICIO 8\n";

    B objetoB;

    std::cout << "Ingrese numeros (ingrese 0 para detener el ingreso):\n";
    
    while (1)
    {
        int p;
        std ::cin >> p;
        if (p <= 0)
            break;
        objetoB.Ingresa(p);
    }

    std ::cout << "Datos leidos :\n";

    for (int i = 0; i < objetoB.DameCant(); i++)
        std::cout << objetoB[i] << "\n";

    system("pause");

    // Ejercicio sobrecargando operador +
    system("cls");
    std::cout << "\n EJERCICIO DEL GRUPO SOBRECARGANDO OPERADOR +\n";
    Cuadrado cuadrado1, cuadrado2, cuadrado3;

    cuadrado1.leer();
    cuadrado1.imprimeArea();
    cuadrado1.imprimePerimetro();

    std::cout << "\n";

    cuadrado2.leer();
    cuadrado2.imprimeArea();
    cuadrado2.imprimePerimetro();

    cuadrado3 = cuadrado1 + cuadrado2;

    std::cout << "\nSuma de area y perimetro:\n\n";
    cuadrado3.imprimeArea();
    cuadrado3.imprimePerimetro();

    std::cout << '\n';

    system("pause");

    return 0;
}

#ifndef A_H
#define A_H

class A
{    
    float x;
   public:
     A(float cx=0);
     void DefineX(float);
     float DameX(void);
     A operator ++ (void); // como prefijo
     A operator ++ (int);  // como sufijo
                           // el parámetro int es obligatorio
};

#endif

#include "A.h"
#include <cstdio>
#include <conio.h>

A::A(float cx)
{    x=cx; 
}

float A::DameX(void)
{    return x; 
}

A A::operator ++ (void)
{    x=x*x;
     return *this;
}

A A::operator ++ (int)
{    A aux=*this;
     x=x*x;
     return aux;
}

#ifndef B_H
#define B_H
#include "Valor.h"

class B //agregado
{    
  int b;
  int cant;
  Valor m[20];
  
  public:
     B(void);
     void DefineB(int);
     int DameB(void);
     int DameCant(void);
     void Ingresa(int);
     int operator[](int);
};

#endif

#include "B.h"
#include <cstdio>
#include <conio.h>
#include "Valor.h"

B::B(void)
{    cant = 0;
}

void B::DefineB(int x)
{    b = x; 
}

int B::DameB(void)
{    return b; 
}

int B::DameCant(void)
{    return cant; 
}

void B::Ingresa(int x)
{    m[cant++].DefineValor(x); 
}

int B::operator[](int i)
{    return m[i].DameValor(); 
}

#ifndef CADENA_H
#define CADENA_H

class Cadena {
    char mensaje[40];

    public:
        Cadena(char *);
        char *dameCadena();
        void operator+(Cadena);
};

#endif

#include "Cadena.h"
#include <cstring>

Cadena::Cadena(char *mensaje) {
    std::strcpy(this->mensaje, mensaje);
}

char *Cadena::dameCadena() {
    return this->mensaje;
}

void Cadena::operator+(Cadena nuevaCadena) {
    std::strcat(this->mensaje, nuevaCadena.dameCadena());
}

#ifndef AA
#define AA
#include<iostream>
class ClaseA
{    int a;
   public:
     friend int P(ClaseA);
     void defineA(int);
     int dameA(void);
};

#endif

#include"ClaseA.h"
void ClaseA::defineA(int x)
{    a = x; 
}

int ClaseA::dameA(void)
{    return a; 
}

#ifndef BB
#define BB
#include"ClaseA.h"
class ClaseB
{    int b;
   public:
     friend int P(ClaseA);
     void defineB(int);
     int dameB(void);
};

#endif

#include"ClaseB.h"
void ClaseB::defineB(int x)
{    b = x; 
}

int ClaseB::dameB(void)
{    return b; 
}
int P(ClaseA OA)
{    ClaseB Ob;
     Ob.defineB(2);
     return OA.a*Ob.b; 
}

#ifndef COMPLEJO_H
#define COMPLEJO_H

class Complejo {
    float parteReal;
    float parteImaginaria;

    public:
        Complejo(float, float);
        float getParteReal();
        float getParteImaginaria();
        Complejo operator+(Complejo);
        Complejo operator-(Complejo);
};

#endif

#include "Complejo.h"

Complejo::Complejo(float real, float imaginario) {
    this->parteReal = real;
    this->parteImaginaria = imaginario;
}

float Complejo::getParteReal() {
    return this->parteReal;
}

float Complejo::getParteImaginaria() {
    return this->parteImaginaria;
}

Complejo Complejo::operator+(Complejo objeto) {
    return Complejo(this->parteReal + objeto.getParteReal(), this->parteImaginaria + objeto.getParteImaginaria());
}

Complejo Complejo::operator-(Complejo objeto) {
    return Complejo(this->parteReal - objeto.getParteReal(), this->parteImaginaria - objeto.getParteImaginaria());
}

#if !defined(COMPLEJO_TEMPLATE_H)
#define COMPLEJO_TEMPLATE_H
#include <iostream>
using namespace std;
template <class T>
class ComplejoTemplate;
template <typename T>
ostream& operator <<(ostream &o, const ComplejoTemplate<T> &A);

template <class T>
class ComplejoTemplate{
	public:
		ComplejoTemplate(T real=0, T img=0);
		void setReal(T real);
		void setImg(T img);
		T getReal();
		T getImg();
		ComplejoTemplate<T>& operator +(const ComplejoTemplate<T>  &A);
		ComplejoTemplate<T>& operator -(const ComplejoTemplate<T>  &A);
	private:
		T real;
		T img;
};

/**
 * @brief Construct a new ComplejoTemplate< T>:: ComplejoTemplate object
 * 
 * @tparam T 
 * @param real 
 * @param img 
 */

template <class T>
ComplejoTemplate<T>::ComplejoTemplate(T real, T img){
	this->real=real;
	this->img=img;
}
/**
 * @brief setReal
 * 
 * @tparam T 
 * @param real 
 */
template <class T>
void ComplejoTemplate<T>::setReal(T real){
	this->real=real;
}
/**
 * @brief setImg
 * 
 * @tparam T 
 * @param img 
 */
template <class T>
void ComplejoTemplate<T>::setImg(T img){
	this->img=img;
}
/**
 * @brief getReal
 * 
 * @tparam T 
 * @return T 
 */
template <class T>
T ComplejoTemplate<T>::getReal(){
	return this->real;
}
/**
 * @brief getImg
 * 
 * @tparam T 
 * @return T 
 */
template <class T>
T ComplejoTemplate<T>::getImg(){
	return this->img;
}
/**
 * @brief sobrecarga Operador +
 * 
 * @tparam T 
 * @param A 
 * @return ComplejoTemplate<T>& 
 */
template <class T>
ComplejoTemplate<T>& ComplejoTemplate<T>::operator +(const ComplejoTemplate<T>  &A){
	this->img+= A.img;
	this->real+= A.real;
	return *this;
}
/**
 * @brief sobrecarga operador -
 * 
 * @tparam T 
 * @param A 
 * @return ComplejoTemplate<T>& 
 */
template <class T>
ComplejoTemplate<T>& ComplejoTemplate<T>::operator -(const ComplejoTemplate<T>  &A){
	this->img-= A.img;
	this->real-= A.real;
	return *this;
}
template class ComplejoTemplate<int>;
template class ComplejoTemplate<float>;
template class ComplejoTemplate<double>;


#endif // MACRO

#ifndef CONSOLA_H
#define CONSOLA_H

class Consola {

    public:
        void ubicarCursor(short x, short y);
};

#endif

#include "Consola.h"
#include <windows.h>

void Consola::ubicarCursor(short x, short y) {
    HANDLE identificadorDeConsola = GetStdHandle(STD_OUTPUT_HANDLE);
    COORD posicion{x, y};
    SetConsoleCursorPosition(identificadorDeConsola, posicion);
}

#ifndef CUADRADO_H
#define CUADRADO_H

class Cuadrado
{    
    float area, perimetro, lado;

    public:
    void leer(void);
    void imprimeArea(void);
    void imprimePerimetro(void);
    void imprimeAreaYPerimetro(void);
    void setArea(float);
    void setPerimetro(float);
    float getArea();
    float getPerimetro();
    //retorno una variable tipo cuadrado 
    Cuadrado operator +(Cuadrado D);

};

#endif

#include "Cuadrado.h"
#include <iostream>
#include <cstdio>
#include <conio.h>

void Cuadrado ::leer(void){
    std :: cout << "Ingrese Lado: " ;
    std :: cin >> this->lado;
    this->area = lado*lado;
    this->perimetro = lado * (float)4;
}

void Cuadrado ::imprimeArea (void){
    std ::cout << "Area: " << this->area << std::endl;
}

void Cuadrado ::imprimePerimetro (void){
    std :: cout << "Perimetro: " << this->perimetro << std::endl;
}

void Cuadrado ::imprimeAreaYPerimetro (void){
    imprimeArea();
    imprimePerimetro();
}


Cuadrado Cuadrado :: operator+  (Cuadrado D){
    Cuadrado aux;
    aux.setArea(this->getArea() + D.getArea());
    aux.setPerimetro(this->getPerimetro() + D.getPerimetro());

    return aux;
}

float Cuadrado::getArea() {
    return this->area;
}

float Cuadrado::getPerimetro() {
    return this->perimetro;
}

void Cuadrado::setArea(float area) {
    this->area = area;
}

void Cuadrado::setPerimetro(float perimetro) {
    this->perimetro = perimetro;
}

#ifndef CUADRO_H
#define CUADRO_H

#include <iostream>
#include <windows.h>

class Cuadro {

    public:
        void dibujar(int);
        void *operator new(std::size_t, short x, short y);
};

#endif

#include "Cuadro.h"
#include "Consola.h"

void Cuadro::dibujar(int cantidadDeCuadros) {
    Consola consola;
    system("cls");
    consola.ubicarCursor(1, 20);

    for (int i{}; i < cantidadDeCuadros; i++) {
        int longitudMensaje = printf("Ingrese coordenada con el siguiente formato x, y: ");

        int x{}, y{};
        scanf("%d%*c%*c%d", &x, &y);

        Cuadro *cuadro = new (x, y) Cuadro;

        consola.ubicarCursor(longitudMensaje, 20);
        for (int i{}; i < 10; i++)
            printf(" ");

        consola.ubicarCursor(1, 20);
    }
}

void *Cuadro::operator new(std::size_t size, short x, short y) {
    const char ICONO = 254;
    void *puntero = ::operator new(size);

    Consola consola;
    consola.ubicarCursor(x, y);
    printf("%c", ICONO);

    return puntero;
}

#include <string>

class Persona{
	private:
	std::string nombre;
	int edad;
	public:
		Persona(std::string ,int m);		
		void imprimirDatos();		
		Persona *operator->();
};

#include<iostream>
#include "Persona.h"
using namespace std;
Persona :: Persona(std::string s,int m){
	this->nombre=s;
	this->edad=m;
}
void Persona :: imprimirDatos(){
	cout<<"Nombre: "<<nombre<<"\nEdad: "<<edad<<endl;
}
Persona* Persona::operator->(){	
			return this;		
}

#include<iostream>
using namespace std;


class Quebrado
{    int numerador;
     int denominador;
   public:
     Quebrado (int,int);
     void DefineNum (int);
     void DefineDen (int);
     int DameNum (void);
     int DameDen (void);
     Quebrado operator+ (Quebrado &);
      // la referencia es sólo por eficiencia
};

Quebrado::Quebrado(int den,int num){
	denominador=den;
	numerador=num;
}

int Quebrado::DameDen(){
	return this->denominador;
}

int Quebrado::DameNum(){
	return this->numerador;
}

/*Quebrado operator + (Quebrado x, Quebrado y)
// aquí si van dos operadores
{    Quebrado queb;
     queb.DefineNum(x.DameNum() * y.DameDen() + y.DameNum() * x.DameDen());
     queb.DefineDen(x.DameDen() * y.DameDen());
     return queb;
};*/

Quebrado Quebrado::operator + (Quebrado &Q)
{   
	return Quebrado (numerador * Q.DameDen()+ Q.DameNum()* denominador , denominador * Q.DameDen());
}

class Reloj
{    int hora;
     int minuto;
     int segundo;
   public:
     Reloj(int h=0, int m=0, int s=0);
     void DefineTiempo(int, int, int);
     void DefineHora(int);
     void DefineMinuto(int);
     void DefineSegundo(int);
     int Hora(void);
     int Minuto(void);
     int Segundo(void);
     void operator ++ (void);
};

#include"Reloj.h"
Reloj::Reloj(int h, int m, int s)
{    hora=h;
     minuto=m;
     segundo=s;
}

void Reloj::DefineTiempo(int h, int m, int s)
{    hora=h;
     minuto=m;
     segundo=s;
}

void Reloj::DefineHora(int h)
{   hora = h;
}

void Reloj::DefineMinuto(int m)
{   minuto = m;
}

void Reloj::DefineSegundo(int s)
{   segundo = s; 
}

int Reloj::Hora(void)
{   return hora; 
}

int Reloj::Minuto(void)
{   return minuto; 
}

int Reloj::Segundo(void)
{   return segundo; 
}

void Reloj::operator ++(void)
{   segundo++;
      if (segundo > 59)
      { segundo -= 60;
          ++minuto;
      }
      if (minuto > 59)
      { minuto -= 60;
          ++hora;
      }
      
      if (hora > 23) hora -= 24;
}

#ifndef VALOR_H
#define VALOR_H

class Valor
{    
  int a;

   public:
     Valor(int = 0);
     void DefineValor(int);
     int DameValor(void);
};
#endif

#include "Valor.h"
#include <cstdio>
#include <conio.h>

Valor::Valor(int x)
{    a = x; 
}

void Valor::DefineValor(int x)
{    a = x; 
}

int Valor::DameValor(void)
{    return a; 
}

class Vector
{    float x;
     float y;
   public:
     Vector(float cx=0, float cy=0);
     void DefineX(float);
     void DefineY(float);
     float DameX(void);
     float DameY(void);
     float operator * (Vector);
};

#include "Vector.h"
Vector::Vector(float cx, float cy)
{    x=cx; y=cy;
}

void Vector::DefineX(float cx)
{    x=cx; 
}

void Vector::DefineY(float cy)
{    y=cy; 
}

float Vector::DameX(void)
{    return x; 
}

float Vector::DameY(void)
{    return y; 
}

float Vector::operator * (Vector V)
{    return (x*V.DameX() + y*V.DameY()); 
}